{
  "version": 3,
  "sources": ["../src/model-repository.ts"],
  "sourcesContent": ["import { EMPTY_OBJECT, cloneDeepPlainValues, freezeDescendants } from '@sequelize/utils';\nimport { mayRunHook } from './hooks.js';\nimport type { ModelDefinition } from './model-definition.js';\nimport {\n  assertHasPrimaryKey,\n  getModelPkWhere,\n  getPrimaryKeyValueOrThrow,\n  setTransactionFromCls,\n} from './model-internals.js';\nimport type { DestroyManyOptions } from './model-repository.types.js';\nimport type { Model } from './model.js';\nimport { Op } from './operators.js';\nimport { isDevEnv } from './utils/check.js';\n\n/**\n * The goal of this class is to become the new home of all the static methods that are currently present on the Model class,\n * as a way to enable a true Repository Mode for Sequelize.\n *\n * Currently this class is not usable as a repository (due to having a dependency on ModelStatic), but as we migrate all of\n * Model to this class, we will be able to remove the dependency on ModelStatic, and make this class usable as a repository.\n *\n * See https://github.com/sequelize/sequelize/issues/15389 for more details.\n *\n * Unlike {@link ModelDefinition}, it's possible to have multiple different repositories for the same model (as users can provide their own implementation).\n */\nexport class ModelRepository<M extends Model = Model> {\n  readonly #modelDefinition: ModelDefinition;\n\n  constructor(modelDefinition: ModelDefinition) {\n    this.#modelDefinition = modelDefinition;\n  }\n\n  get #sequelize() {\n    return this.#modelDefinition.sequelize;\n  }\n\n  get #queryInterface() {\n    return this.#sequelize.queryInterface;\n  }\n\n  async _UNSTABLE_destroy(\n    instanceOrInstances: readonly M[] | M,\n    options: DestroyManyOptions = EMPTY_OBJECT,\n  ): Promise<number> {\n    const { ...optionsClone } = options;\n\n    assertHasPrimaryKey(this.#modelDefinition);\n    setTransactionFromCls(optionsClone, this.#sequelize);\n\n    const instances: M[] = Array.isArray(instanceOrInstances)\n      ? [...instanceOrInstances]\n      : [instanceOrInstances];\n    if (instances.length === 0) {\n      return 0;\n    }\n\n    if (isDevEnv()) {\n      // Users should not mutate any mutable value inside `options`, and instead mutate the `options` object directly\n      // This ensures `options` remains immutable while limiting ourselves to a shallow clone in production,\n      // improving performance.\n      freezeDescendants(cloneDeepPlainValues(optionsClone, true));\n    }\n\n    if (mayRunHook('beforeDestroyMany', optionsClone.noHooks)) {\n      await this.#modelDefinition.hooks.runAsync('beforeDestroyMany', instances, optionsClone);\n\n      // in case the beforeDestroyMany hook removed all instances.\n      if (instances.length === 0) {\n        return 0;\n      }\n    }\n\n    Object.freeze(optionsClone);\n    Object.freeze(instances);\n\n    const isSoftDelete = !optionsClone.hardDelete && this.#modelDefinition.isParanoid();\n    if (isSoftDelete) {\n      // TODO: implement once updateMany is implemented - https://github.com/sequelize/sequelize/issues/4501\n      throw new Error('ModelRepository#destroy does not support paranoid deletion yet.');\n    }\n\n    const primaryKeys = this.#modelDefinition.primaryKeysAttributeNames;\n    let where;\n    if (instances.length === 1) {\n      where = getModelPkWhere(instances[0], true)!;\n    } else if (primaryKeys.size === 1 && !this.#modelDefinition.versionAttributeName) {\n      const primaryKey: string = primaryKeys.values().next().value;\n\n      const values = instances.map(instance => getPrimaryKeyValueOrThrow(instance, primaryKey));\n\n      where = { [primaryKey]: values };\n    } else {\n      where = {\n        // Ideally, we'd use tuple comparison here, but that's not supported by Sequelize yet.\n        // It would look like this:\n        // WHERE (id1, id2) IN ((1, 2), (3, 4))\n        [Op.or]: instances.map(instance => getModelPkWhere(instance, true)!),\n      };\n    }\n\n    const bulkDeleteOptions = {\n      ...optionsClone,\n      limit: null,\n      where,\n    };\n\n    // DestroyManyOptions-specific options.\n    delete bulkDeleteOptions.hardDelete;\n    delete bulkDeleteOptions.noHooks;\n\n    const result = await this.#queryInterface.bulkDelete(this.#modelDefinition, bulkDeleteOptions);\n\n    if (mayRunHook('afterDestroyMany', optionsClone.noHooks)) {\n      await this.#modelDefinition.hooks.runAsync(\n        'afterDestroyMany',\n        instances,\n        optionsClone,\n        result,\n      );\n    }\n\n    return result;\n  }\n\n  // async save(instances: M[] | M): Promise<void> {}\n  // async updateOne(instance: M, values: object, options: unknown): Promise<M> {}\n  // async updateMany(data: Array<{ instance: M, values: object }>, options: unknown): Promise<M> {}\n  // async updateMany(data: Array<{ where: object, values: object }>, options: unknown): Promise<M> {}\n  // async restore(instances: M[] | M, options: unknown): Promise<number> {}\n  // async bulkUpdate(options: unknown): Promise<M> {}\n  // async bulkDestroy(options: unknown): Promise<M> {}\n  // async bulkRestore(options: unknown): Promise<M> {}\n}\n\nconst modelRepositories = new WeakMap<ModelDefinition, ModelRepository>();\n\nexport function getModelRepository(model: ModelDefinition): ModelRepository {\n  let internals = modelRepositories.get(model);\n  if (internals) {\n    return internals;\n  }\n\n  internals = new ModelRepository(model);\n\n  return internals;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAsE;AACtE,mBAA2B;AAE3B,6BAKO;AAGP,uBAAmB;AACnB,mBAAyB;AAalB,MAAM,gBAAyC;AAAA,EAC3C;AAAA,EAET,YAAY,iBAAkC;AAC5C,SAAK,mBAAmB;AAAA,EAC1B;AAAA,EAEA,IAAI,aAAa;AACf,WAAO,KAAK,iBAAiB;AAAA,EAC/B;AAAA,EAEA,IAAI,kBAAkB;AACpB,WAAO,KAAK,WAAW;AAAA,EACzB;AAAA,EAEA,MAAM,kBACJ,qBACA,UAA8B,2BACb;AACjB,UAAM,EAAE,GAAG,aAAa,IAAI;AAE5B,oDAAoB,KAAK,gBAAgB;AACzC,sDAAsB,cAAc,KAAK,UAAU;AAEnD,UAAM,YAAiB,MAAM,QAAQ,mBAAmB,IACpD,CAAC,GAAG,mBAAmB,IACvB,CAAC,mBAAmB;AACxB,QAAI,UAAU,WAAW,GAAG;AAC1B,aAAO;AAAA,IACT;AAEA,YAAI,uBAAS,GAAG;AAId,8CAAkB,mCAAqB,cAAc,IAAI,CAAC;AAAA,IAC5D;AAEA,YAAI,yBAAW,qBAAqB,aAAa,OAAO,GAAG;AACzD,YAAM,KAAK,iBAAiB,MAAM,SAAS,qBAAqB,WAAW,YAAY;AAGvF,UAAI,UAAU,WAAW,GAAG;AAC1B,eAAO;AAAA,MACT;AAAA,IACF;AAEA,WAAO,OAAO,YAAY;AAC1B,WAAO,OAAO,SAAS;AAEvB,UAAM,eAAe,CAAC,aAAa,cAAc,KAAK,iBAAiB,WAAW;AAClF,QAAI,cAAc;AAEhB,YAAM,IAAI,MAAM,iEAAiE;AAAA,IACnF;AAEA,UAAM,cAAc,KAAK,iBAAiB;AAC1C,QAAI;AACJ,QAAI,UAAU,WAAW,GAAG;AAC1B,kBAAQ,wCAAgB,UAAU,CAAC,GAAG,IAAI;AAAA,IAC5C,WAAW,YAAY,SAAS,KAAK,CAAC,KAAK,iBAAiB,sBAAsB;AAChF,YAAM,aAAqB,YAAY,OAAO,EAAE,KAAK,EAAE;AAEvD,YAAM,SAAS,UAAU,IAAI,kBAAY,kDAA0B,UAAU,UAAU,CAAC;AAExF,cAAQ,EAAE,CAAC,UAAU,GAAG,OAAO;AAAA,IACjC,OAAO;AACL,cAAQ;AAAA;AAAA;AAAA;AAAA,QAIN,CAAC,oBAAG,EAAE,GAAG,UAAU,IAAI,kBAAY,wCAAgB,UAAU,IAAI,CAAE;AAAA,MACrE;AAAA,IACF;AAEA,UAAM,oBAAoB;AAAA,MACxB,GAAG;AAAA,MACH,OAAO;AAAA,MACP;AAAA,IACF;AAGA,WAAO,kBAAkB;AACzB,WAAO,kBAAkB;AAEzB,UAAM,SAAS,MAAM,KAAK,gBAAgB,WAAW,KAAK,kBAAkB,iBAAiB;AAE7F,YAAI,yBAAW,oBAAoB,aAAa,OAAO,GAAG;AACxD,YAAM,KAAK,iBAAiB,MAAM;AAAA,QAChC;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUF;AAEA,MAAM,oBAAoB,oBAAI,QAA0C;AAEjE,SAAS,mBAAmB,OAAyC;AAC1E,MAAI,YAAY,kBAAkB,IAAI,KAAK;AAC3C,MAAI,WAAW;AACb,WAAO;AAAA,EACT;AAEA,cAAY,IAAI,gBAAgB,KAAK;AAErC,SAAO;AACT;",
  "names": []
}
