{
  "version": 3,
  "sources": ["../../../src/dialects/snowflake/query-generator-typescript.ts"],
  "sourcesContent": ["import { Op } from '../../operators.js';\nimport { rejectInvalidOptions } from '../../utils/check';\nimport { joinSQLFragments } from '../../utils/join-sql-fragments';\nimport { EMPTY_SET } from '../../utils/object.js';\nimport { AbstractQueryGenerator } from '../abstract/query-generator';\nimport type { TableOrModel } from '../abstract/query-generator-typescript';\nimport {\n  CREATE_DATABASE_QUERY_SUPPORTABLE_OPTIONS,\n  LIST_DATABASES_QUERY_SUPPORTABLE_OPTIONS,\n  SHOW_CONSTRAINTS_QUERY_SUPPORTABLE_OPTIONS,\n  START_TRANSACTION_QUERY_SUPPORTABLE_OPTIONS,\n  TRUNCATE_TABLE_QUERY_SUPPORTABLE_OPTIONS,\n} from '../abstract/query-generator-typescript';\nimport type {\n  CreateDatabaseQueryOptions,\n  ListDatabasesQueryOptions,\n  ListSchemasQueryOptions,\n  ListTablesQueryOptions,\n  ShowConstraintsQueryOptions,\n  StartTransactionQueryOptions,\n  TruncateTableQueryOptions,\n} from '../abstract/query-generator.types';\nimport type { SnowflakeDialect } from './index.js';\nimport { SnowflakeQueryGeneratorInternal } from './query-generator-internal.js';\n\nconst SHOW_CONSTRAINTS_QUERY_SUPPORTED_OPTIONS = new Set<keyof ShowConstraintsQueryOptions>([\n  'constraintName',\n  'constraintType',\n]);\n\n/**\n * Temporary class to ease the TypeScript migration\n */\nexport class SnowflakeQueryGeneratorTypeScript extends AbstractQueryGenerator {\n  readonly #internals: SnowflakeQueryGeneratorInternal;\n\n  constructor(\n    dialect: SnowflakeDialect,\n    internals: SnowflakeQueryGeneratorInternal = new SnowflakeQueryGeneratorInternal(dialect),\n  ) {\n    super(dialect, internals);\n\n    internals.whereSqlBuilder.setOperatorKeyword(Op.regexp, 'REGEXP');\n    internals.whereSqlBuilder.setOperatorKeyword(Op.notRegexp, 'NOT REGEXP');\n\n    this.#internals = internals;\n  }\n\n  createDatabaseQuery(database: string, options?: CreateDatabaseQueryOptions) {\n    if (options) {\n      rejectInvalidOptions(\n        'createDatabaseQuery',\n        this.dialect,\n        CREATE_DATABASE_QUERY_SUPPORTABLE_OPTIONS,\n        EMPTY_SET,\n        options,\n      );\n    }\n\n    return joinSQLFragments([`CREATE DATABASE IF NOT EXISTS ${this.quoteIdentifier(database)}`]);\n  }\n\n  listDatabasesQuery(options?: ListDatabasesQueryOptions) {\n    if (options) {\n      rejectInvalidOptions(\n        'listDatabasesQuery',\n        this.dialect,\n        LIST_DATABASES_QUERY_SUPPORTABLE_OPTIONS,\n        EMPTY_SET,\n        options,\n      );\n    }\n\n    return `SHOW DATABASES`;\n  }\n\n  listSchemasQuery(options?: ListSchemasQueryOptions) {\n    let schemasToSkip = this.#internals.getTechnicalSchemaNames();\n    if (options && Array.isArray(options?.skip)) {\n      schemasToSkip = [...schemasToSkip, ...options.skip];\n    }\n\n    return joinSQLFragments([\n      'SELECT SCHEMA_NAME AS \"schema\"',\n      'FROM INFORMATION_SCHEMA.SCHEMATA',\n      `WHERE SCHEMA_NAME NOT IN (${schemasToSkip.map(schema => this.escape(schema)).join(', ')})`,\n    ]);\n  }\n\n  describeTableQuery(tableName: TableOrModel) {\n    return `SHOW FULL COLUMNS FROM ${this.quoteTable(tableName)};`;\n  }\n\n  listTablesQuery(options?: ListTablesQueryOptions) {\n    return joinSQLFragments([\n      'SELECT TABLE_NAME AS \"tableName\",',\n      'TABLE_SCHEMA AS \"schema\"',\n      `FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'`,\n      options?.schema\n        ? `AND TABLE_SCHEMA = ${this.escape(options.schema)}`\n        : `AND TABLE_SCHEMA NOT IN (${this.#internals\n            .getTechnicalSchemaNames()\n            .map(schema => this.escape(schema))\n            .join(', ')})`,\n      'ORDER BY TABLE_SCHEMA, TABLE_NAME',\n    ]);\n  }\n\n  truncateTableQuery(tableName: TableOrModel, options?: TruncateTableQueryOptions) {\n    if (options) {\n      rejectInvalidOptions(\n        'truncateTableQuery',\n        this.dialect,\n        TRUNCATE_TABLE_QUERY_SUPPORTABLE_OPTIONS,\n        EMPTY_SET,\n        options,\n      );\n    }\n\n    return `TRUNCATE ${this.quoteTable(tableName)}`;\n  }\n\n  showConstraintsQuery(tableName: TableOrModel, options?: ShowConstraintsQueryOptions) {\n    if (options) {\n      rejectInvalidOptions(\n        'showConstraintsQuery',\n        this.dialect,\n        SHOW_CONSTRAINTS_QUERY_SUPPORTABLE_OPTIONS,\n        SHOW_CONSTRAINTS_QUERY_SUPPORTED_OPTIONS,\n        options,\n      );\n    }\n\n    const table = this.extractTableDetails(tableName);\n\n    return joinSQLFragments([\n      'SELECT c.CONSTRAINT_CATALOG AS constraintCatalog,',\n      'c.CONSTRAINT_SCHEMA AS constraintSchema,',\n      'c.CONSTRAINT_NAME AS constraintName,',\n      'c.CONSTRAINT_TYPE AS constraintType,',\n      'c.TABLE_CATALOG AS tableCatalog,',\n      'c.TABLE_SCHEMA AS tableSchema,',\n      'c.TABLE_NAME AS tableName,',\n      'fk.TABLE_SCHEMA AS referencedTableSchema,',\n      'fk.TABLE_NAME AS referencedTableName,',\n      'r.DELETE_RULE AS deleteAction,',\n      'r.UPDATE_RULE AS updateAction,',\n      'c.IS_DEFERRABLE AS isDeferrable,',\n      'c.INITIALLY_DEFERRED AS initiallyDeferred',\n      'FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS c',\n      'LEFT JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS r ON c.CONSTRAINT_CATALOG = r.CONSTRAINT_CATALOG AND c.CONSTRAINT_SCHEMA = r.CONSTRAINT_SCHEMA AND c.CONSTRAINT_NAME = r.CONSTRAINT_NAME',\n      'LEFT JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS fk ON r.UNIQUE_CONSTRAINT_CATALOG = fk.CONSTRAINT_CATALOG AND r.UNIQUE_CONSTRAINT_SCHEMA = fk.CONSTRAINT_SCHEMA AND r.UNIQUE_CONSTRAINT_NAME = fk.CONSTRAINT_NAME',\n      `WHERE c.TABLE_NAME = ${this.escape(table.tableName)}`,\n      `AND c.TABLE_SCHEMA = ${this.escape(table.schema)}`,\n      options?.constraintName\n        ? `AND c.CONSTRAINT_NAME = ${this.escape(options.constraintName)}`\n        : '',\n      options?.constraintType\n        ? `AND c.CONSTRAINT_TYPE = ${this.escape(options.constraintType)}`\n        : '',\n      'ORDER BY c.CONSTRAINT_NAME',\n    ]);\n  }\n\n  showIndexesQuery() {\n    // TODO [+snowflake-sdk]: check if this is the correct implementation\n    return `SELECT '' FROM DUAL`;\n  }\n\n  versionQuery() {\n    return 'SELECT CURRENT_VERSION() AS \"version\"';\n  }\n\n  startTransactionQuery(options?: StartTransactionQueryOptions): string {\n    if (options) {\n      rejectInvalidOptions(\n        'startTransactionQuery',\n        this.dialect,\n        START_TRANSACTION_QUERY_SUPPORTABLE_OPTIONS,\n        this.dialect.supports.startTransaction,\n        options,\n      );\n    }\n\n    return options?.transactionName\n      ? `START TRANSACTION NAME ${this.quoteIdentifier(options.transactionName)}`\n      : 'START TRANSACTION';\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
