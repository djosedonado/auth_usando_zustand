{
  "version": 3,
  "sources": ["../../../src/dialects/db2/query-interface-typescript.ts"],
  "sourcesContent": ["import { QueryTypes } from '../../query-types';\nimport { Transaction } from '../../transaction';\nimport { rejectInvalidOptions } from '../../utils/check';\nimport { START_TRANSACTION_QUERY_SUPPORTABLE_OPTIONS } from '../abstract/query-generator-typescript';\nimport { AbstractQueryInterface } from '../abstract/query-interface';\nimport type {\n  CommitTransactionOptions,\n  QiDropAllSchemasOptions,\n  RollbackTransactionOptions,\n  SetIsolationLevelOptions,\n  StartTransactionOptions,\n} from '../abstract/query-interface.types';\nimport type { Db2Connection } from './connection-manager';\nimport type { Db2Dialect } from './index.js';\nimport { Db2QueryInterfaceInternal } from './query-interface-internal';\n\nexport class Db2QueryInterfaceTypeScript<\n  Dialect extends Db2Dialect = Db2Dialect,\n> extends AbstractQueryInterface<Dialect> {\n  readonly #internalQueryInterface: Db2QueryInterfaceInternal;\n\n  constructor(dialect: Dialect, internalQueryInterface?: Db2QueryInterfaceInternal) {\n    internalQueryInterface ??= new Db2QueryInterfaceInternal(dialect);\n\n    super(dialect, internalQueryInterface);\n    this.#internalQueryInterface = internalQueryInterface;\n  }\n\n  async dropAllSchemas(options?: QiDropAllSchemasOptions): Promise<void> {\n    const skip = options?.skip || [];\n    const allSchemas = await this.listSchemas(options);\n    const schemaNames = allSchemas.filter(schemaName => !skip.includes(schemaName));\n\n    // if the dialect does not support \"cascade\", then drop all tables and routines first in a loop to avoid deadlocks and timeouts\n    if (options?.cascade === undefined) {\n      for (const schema of schemaNames) {\n        // eslint-disable-next-line no-await-in-loop\n        await this.dropAllTables({ ...options, schema });\n\n        // In Db2 the routines are scoped to the schema, so we need to drop them separately for each schema\n        // eslint-disable-next-line no-await-in-loop\n        const routines = await this.sequelize.queryRaw<{\n          ROUTINENAME: string;\n          ROUTINETYPE: 'F' | 'M' | 'P';\n        }>(\n          `SELECT ROUTINENAME, ROUTINETYPE FROM SYSCAT.ROUTINES WHERE ROUTINESCHEMA = ${this.queryGenerator.escape(schema)}`,\n          {\n            ...options,\n            type: QueryTypes.SELECT,\n          },\n        );\n        for (const routine of routines) {\n          const type =\n            routine.ROUTINETYPE === 'F'\n              ? 'FUNCTION'\n              : routine.ROUTINETYPE === 'P'\n                ? 'PROCEDURE'\n                : routine.ROUTINETYPE === 'M'\n                  ? 'METHOD'\n                  : '';\n          // eslint-disable-next-line no-await-in-loop\n          await this.sequelize.queryRaw(\n            `DROP ${type} ${this.quoteIdentifier(schema)}.${this.quoteIdentifier(routine.ROUTINENAME)}`,\n            options,\n          );\n        }\n\n        // In Db2 the triggers are scoped to the schema, so we need to drop them separately for each schema\n        // eslint-disable-next-line no-await-in-loop\n        const triggers = await this.sequelize.queryRaw<{ TRIGNAME: string }>(\n          `SELECT TRIGNAME FROM SYSCAT.TRIGGERS WHERE TRIGSCHEMA = ${this.queryGenerator.escape(schema)}`,\n          {\n            ...options,\n            type: QueryTypes.SELECT,\n          },\n        );\n        for (const trigger of triggers) {\n          // eslint-disable-next-line no-await-in-loop\n          await this.sequelize.queryRaw(\n            `DROP TRIGGER ${this.quoteIdentifier(schema)}.${this.quoteIdentifier(trigger.TRIGNAME)}`,\n            options,\n          );\n        }\n      }\n    }\n\n    // Drop all the schemas in a loop to avoid deadlocks and timeouts\n    for (const schema of schemaNames) {\n      // eslint-disable-next-line no-await-in-loop\n      await this.dropSchema(schema, options);\n    }\n  }\n\n  async _commitTransaction(\n    transaction: Transaction,\n    _options: CommitTransactionOptions,\n  ): Promise<void> {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to commit a transaction without the transaction object.');\n    }\n\n    const connection = transaction.getConnection() as Db2Connection;\n    await connection.commitTransaction();\n  }\n\n  async _rollbackTransaction(\n    transaction: Transaction,\n    _options: RollbackTransactionOptions,\n  ): Promise<void> {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to rollback a transaction without the transaction object.');\n    }\n\n    const connection = transaction.getConnection() as Db2Connection;\n    await connection.rollbackTransaction();\n  }\n\n  async _setIsolationLevel(\n    transaction: Transaction,\n    options: SetIsolationLevelOptions,\n  ): Promise<void> {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error(\n        'Unable to set the isolation level for a transaction without the transaction object.',\n      );\n    }\n\n    const level = this.#internalQueryInterface.parseIsolationLevel(options.isolationLevel);\n    const connection = transaction.getConnection() as Db2Connection;\n    connection.setIsolationLevel(level);\n  }\n\n  async _startTransaction(\n    transaction: Transaction,\n    options: StartTransactionOptions,\n  ): Promise<void> {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to start a transaction without the transaction object.');\n    }\n\n    if (options) {\n      rejectInvalidOptions(\n        'startTransactionQuery',\n        this.sequelize.dialect,\n        START_TRANSACTION_QUERY_SUPPORTABLE_OPTIONS,\n        this.sequelize.dialect.supports.startTransaction,\n        options,\n      );\n    }\n\n    const connection = transaction.getConnection() as Db2Connection;\n    await connection.beginTransaction();\n    if (options.isolationLevel) {\n      await transaction.setIsolationLevel(options.isolationLevel);\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
