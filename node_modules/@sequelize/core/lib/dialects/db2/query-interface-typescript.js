"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var query_interface_typescript_exports = {};
__export(query_interface_typescript_exports, {
  Db2QueryInterfaceTypeScript: () => Db2QueryInterfaceTypeScript
});
module.exports = __toCommonJS(query_interface_typescript_exports);
var import_query_types = require("../../query-types");
var import_transaction = require("../../transaction");
var import_check = require("../../utils/check");
var import_query_generator_typescript = require("../abstract/query-generator-typescript");
var import_query_interface = require("../abstract/query-interface");
var import_query_interface_internal = require("./query-interface-internal");
class Db2QueryInterfaceTypeScript extends import_query_interface.AbstractQueryInterface {
  #internalQueryInterface;
  constructor(dialect, internalQueryInterface) {
    internalQueryInterface ??= new import_query_interface_internal.Db2QueryInterfaceInternal(dialect);
    super(dialect, internalQueryInterface);
    this.#internalQueryInterface = internalQueryInterface;
  }
  async dropAllSchemas(options) {
    const skip = options?.skip || [];
    const allSchemas = await this.listSchemas(options);
    const schemaNames = allSchemas.filter((schemaName) => !skip.includes(schemaName));
    if (options?.cascade === void 0) {
      for (const schema of schemaNames) {
        await this.dropAllTables({ ...options, schema });
        const routines = await this.sequelize.queryRaw(
          `SELECT ROUTINENAME, ROUTINETYPE FROM SYSCAT.ROUTINES WHERE ROUTINESCHEMA = ${this.queryGenerator.escape(schema)}`,
          {
            ...options,
            type: import_query_types.QueryTypes.SELECT
          }
        );
        for (const routine of routines) {
          const type = routine.ROUTINETYPE === "F" ? "FUNCTION" : routine.ROUTINETYPE === "P" ? "PROCEDURE" : routine.ROUTINETYPE === "M" ? "METHOD" : "";
          await this.sequelize.queryRaw(
            `DROP ${type} ${this.quoteIdentifier(schema)}.${this.quoteIdentifier(routine.ROUTINENAME)}`,
            options
          );
        }
        const triggers = await this.sequelize.queryRaw(
          `SELECT TRIGNAME FROM SYSCAT.TRIGGERS WHERE TRIGSCHEMA = ${this.queryGenerator.escape(schema)}`,
          {
            ...options,
            type: import_query_types.QueryTypes.SELECT
          }
        );
        for (const trigger of triggers) {
          await this.sequelize.queryRaw(
            `DROP TRIGGER ${this.quoteIdentifier(schema)}.${this.quoteIdentifier(trigger.TRIGNAME)}`,
            options
          );
        }
      }
    }
    for (const schema of schemaNames) {
      await this.dropSchema(schema, options);
    }
  }
  async _commitTransaction(transaction, _options) {
    if (!transaction || !(transaction instanceof import_transaction.Transaction)) {
      throw new Error("Unable to commit a transaction without the transaction object.");
    }
    const connection = transaction.getConnection();
    await connection.commitTransaction();
  }
  async _rollbackTransaction(transaction, _options) {
    if (!transaction || !(transaction instanceof import_transaction.Transaction)) {
      throw new Error("Unable to rollback a transaction without the transaction object.");
    }
    const connection = transaction.getConnection();
    await connection.rollbackTransaction();
  }
  async _setIsolationLevel(transaction, options) {
    if (!transaction || !(transaction instanceof import_transaction.Transaction)) {
      throw new Error(
        "Unable to set the isolation level for a transaction without the transaction object."
      );
    }
    const level = this.#internalQueryInterface.parseIsolationLevel(options.isolationLevel);
    const connection = transaction.getConnection();
    connection.setIsolationLevel(level);
  }
  async _startTransaction(transaction, options) {
    if (!transaction || !(transaction instanceof import_transaction.Transaction)) {
      throw new Error("Unable to start a transaction without the transaction object.");
    }
    if (options) {
      (0, import_check.rejectInvalidOptions)(
        "startTransactionQuery",
        this.sequelize.dialect,
        import_query_generator_typescript.START_TRANSACTION_QUERY_SUPPORTABLE_OPTIONS,
        this.sequelize.dialect.supports.startTransaction,
        options
      );
    }
    const connection = transaction.getConnection();
    await connection.beginTransaction();
    if (options.isolationLevel) {
      await transaction.setIsolationLevel(options.isolationLevel);
    }
  }
}
//# sourceMappingURL=query-interface-typescript.js.map
