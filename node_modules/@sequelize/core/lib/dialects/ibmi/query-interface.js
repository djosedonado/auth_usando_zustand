"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var query_interface_exports = {};
__export(query_interface_exports, {
  IBMiQueryInterface: () => IBMiQueryInterface
});
module.exports = __toCommonJS(query_interface_exports);
var import_transaction = require("../../transaction");
var import_check = require("../../utils/check");
var import_query_generator_typescript = require("../abstract/query-generator-typescript");
var import_query_interface = require("../abstract/query-interface");
var import_query_interface_internal = require("./query-interface-internal.js");
class IBMiQueryInterface extends import_query_interface.AbstractQueryInterface {
  #internalQueryInterface;
  constructor(dialect, internalQueryInterface) {
    internalQueryInterface ??= new import_query_interface_internal.IBMiQueryInterfaceInternal(dialect);
    super(dialect, internalQueryInterface);
    this.#internalQueryInterface = internalQueryInterface;
  }
  async _startTransaction(transaction, options) {
    if (!transaction || !(transaction instanceof import_transaction.Transaction)) {
      throw new Error("Unable to start a transaction without the transaction object.");
    }
    if (options) {
      (0, import_check.rejectInvalidOptions)(
        "startTransactionQuery",
        this.sequelize.dialect,
        import_query_generator_typescript.START_TRANSACTION_QUERY_SUPPORTABLE_OPTIONS,
        this.sequelize.dialect.supports.startTransaction,
        options
      );
    }
    const connection = transaction.getConnection();
    await connection.beginTransaction();
    if (options.isolationLevel) {
      await transaction.setIsolationLevel(options.isolationLevel);
    }
  }
  async _commitTransaction(transaction, _options) {
    if (!transaction || !(transaction instanceof import_transaction.Transaction)) {
      throw new Error("Unable to commit a transaction without the transaction object.");
    }
    const connection = transaction.getConnection();
    await connection.commit();
  }
  async _rollbackTransaction(transaction, _options) {
    if (!transaction || !(transaction instanceof import_transaction.Transaction)) {
      throw new Error("Unable to rollback a transaction without the transaction object.");
    }
    const connection = transaction.getConnection();
    await connection.rollback();
  }
  async _setIsolationLevel(transaction, options) {
    if (!transaction || !(transaction instanceof import_transaction.Transaction)) {
      throw new Error(
        "Unable to set the isolation level for a transaction without the transaction object."
      );
    }
    const level = this.#internalQueryInterface.parseIsolationLevel(options.isolationLevel);
    const connection = transaction.getConnection();
    await connection.setIsolationLevel(level);
  }
}
//# sourceMappingURL=query-interface.js.map
