{
  "version": 3,
  "sources": ["../../../src/dialects/ibmi/index.ts"],
  "sourcesContent": ["import type { Sequelize } from '../../sequelize.js';\nimport { createUnspecifiedOrderedBindCollector } from '../../utils/sql';\nimport { AbstractDialect } from '../abstract';\nimport { IBMiConnectionManager } from './connection-manager';\nimport * as DataTypes from './data-types.js';\nimport { IBMiQuery } from './query';\nimport { IBMiQueryGenerator } from './query-generator';\nimport { IBMiQueryInterface } from './query-interface.js';\n\nexport class IBMiDialect extends AbstractDialect {\n  static supports = AbstractDialect.extendSupport({\n    'VALUES ()': true,\n    'ON DUPLICATE KEY': false,\n    connectionTransactionMethods: true,\n    bulkDefault: true,\n    index: {\n      using: false,\n      where: true,\n      functionBased: true,\n      collate: false,\n      include: false,\n    },\n    constraints: {\n      onUpdate: false,\n    },\n    groupedLimit: false,\n    upserts: false,\n    schemas: true,\n    dataTypes: {\n      COLLATE_BINARY: true,\n    },\n    removeColumn: {\n      cascade: true,\n    },\n    renameTable: {\n      changeSchema: false,\n      changeSchemaAndTable: false,\n    },\n    createSchema: {\n      authorization: true,\n    },\n    dropSchema: {\n      cascade: true,\n      ifExists: true,\n    },\n  });\n\n  readonly connectionManager: IBMiConnectionManager;\n  readonly queryGenerator: IBMiQueryGenerator;\n  readonly queryInterface: IBMiQueryInterface;\n\n  readonly dataTypesDocumentationUrl =\n    'https://www.ibm.com/support/knowledgecenter/en/ssw_ibm_i_73/db2/rbafzch2data.htm';\n\n  readonly defaultVersion = '7.3.0';\n  readonly Query = IBMiQuery;\n  readonly TICK_CHAR_LEFT = '\"';\n  readonly TICK_CHAR_RIGHT = '\"';\n\n  constructor(sequelize: Sequelize) {\n    console.warn(\n      'The IBMi dialect is experimental and usage is at your own risk. Its development is exclusively community-driven and not officially supported by the maintainers.',\n    );\n\n    super(sequelize, DataTypes, 'ibmi');\n\n    this.connectionManager = new IBMiConnectionManager(this);\n    this.queryGenerator = new IBMiQueryGenerator(this);\n    this.queryInterface = new IBMiQueryInterface(this);\n  }\n\n  createBindCollector() {\n    return createUnspecifiedOrderedBindCollector();\n  }\n\n  escapeBuffer(buffer: Buffer): string {\n    return `BLOB(X'${buffer.toString('hex')}')`;\n  }\n\n  getDefaultSchema(): string {\n    // TODO: what is the default schema in IBMi?\n    return '';\n  }\n\n  static getDefaultPort() {\n    return 25_000;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,iBAAsD;AACtD,sBAAgC;AAChC,gCAAsC;AACtC,gBAA2B;AAC3B,mBAA0B;AAC1B,6BAAmC;AACnC,6BAAmC;AAE5B,MAAM,oBAAoB,gCAAgB;AAAA,EAC/C,OAAO,WAAW,gCAAgB,cAAc;AAAA,IAC9C,aAAa;AAAA,IACb,oBAAoB;AAAA,IACpB,8BAA8B;AAAA,IAC9B,aAAa;AAAA,IACb,OAAO;AAAA,MACL,OAAO;AAAA,MACP,OAAO;AAAA,MACP,eAAe;AAAA,MACf,SAAS;AAAA,MACT,SAAS;AAAA,IACX;AAAA,IACA,aAAa;AAAA,MACX,UAAU;AAAA,IACZ;AAAA,IACA,cAAc;AAAA,IACd,SAAS;AAAA,IACT,SAAS;AAAA,IACT,WAAW;AAAA,MACT,gBAAgB;AAAA,IAClB;AAAA,IACA,cAAc;AAAA,MACZ,SAAS;AAAA,IACX;AAAA,IACA,aAAa;AAAA,MACX,cAAc;AAAA,MACd,sBAAsB;AAAA,IACxB;AAAA,IACA,cAAc;AAAA,MACZ,eAAe;AAAA,IACjB;AAAA,IACA,YAAY;AAAA,MACV,SAAS;AAAA,MACT,UAAU;AAAA,IACZ;AAAA,EACF,CAAC;AAAA,EAEQ;AAAA,EACA;AAAA,EACA;AAAA,EAEA,4BACP;AAAA,EAEO,iBAAiB;AAAA,EACjB,QAAQ;AAAA,EACR,iBAAiB;AAAA,EACjB,kBAAkB;AAAA,EAE3B,YAAY,WAAsB;AAChC,YAAQ;AAAA,MACN;AAAA,IACF;AAEA,UAAM,WAAW,WAAW,MAAM;AAElC,SAAK,oBAAoB,IAAI,gDAAsB,IAAI;AACvD,SAAK,iBAAiB,IAAI,0CAAmB,IAAI;AACjD,SAAK,iBAAiB,IAAI,0CAAmB,IAAI;AAAA,EACnD;AAAA,EAEA,sBAAsB;AACpB,eAAO,kDAAsC;AAAA,EAC/C;AAAA,EAEA,aAAa,QAAwB;AACnC,WAAO,UAAU,OAAO,SAAS,KAAK;AAAA,EACxC;AAAA,EAEA,mBAA2B;AAEzB,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,iBAAiB;AACtB,WAAO;AAAA,EACT;AACF;",
  "names": []
}
