"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseSafeInteger = void 0;
const build_parser_js_1 = require("../_internal/build-parser.js");
const inspect_js_1 = require("../inspect.js");
const is_big_int_js_1 = require("../predicates/is-big-int.js");
const is_valid_integer_syntax_js_1 = require("../predicates/is-valid-integer-syntax.js");
const parse_finite_number_js_1 = require("./parse-finite-number.js");
function parseSafeIntegerInternal(value, radix = 10) {
    let result;
    if ((0, is_big_int_js_1.isBigInt)(value) || radix === 10) {
        // delegating to parseNumber as it supports scientific notation & only base 10 is allowed
        result = (0, parse_finite_number_js_1.parseFiniteNumber)(value);
    }
    else {
        if (!(0, is_valid_integer_syntax_js_1.isValidIntegerSyntax)(value, radix)) {
            return null;
        }
        result = Number.parseInt(value, radix);
    }
    if (!Number.isSafeInteger(result)) {
        return null;
    }
    return result;
}
/**
 * Parses a string as a safe integer in the specified radix.
 * This method supports the scientific notation (e.g. 5e1 produces 50).
 * The Scientific notation is only allowed in base 10.
 *
 * @param value The string to parse as a safe integer
 * @param radix The radix
 * @returns null if the input is not an integer or is not safely representable by the JS number type (use parseBigInt for that)
 */
exports.parseSafeInteger = (0, build_parser_js_1.buildNullBasedParser)(parseSafeIntegerInternal, (value, radix = 10) => `Value ${(0, inspect_js_1.inspect)(value)} is not a valid base ${(0, inspect_js_1.inspect)(radix)} integer`);
