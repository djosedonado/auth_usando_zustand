"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseFiniteNumber = void 0;
const build_parser_js_1 = require("../_internal/build-parser.js");
const inspect_js_1 = require("../inspect.js");
const is_big_int_js_1 = require("../predicates/is-big-int.js");
const is_valid_number_syntax_js_1 = require("../predicates/is-valid-number-syntax.js");
function parseFiniteNumberInternal(value) {
    if ((0, is_big_int_js_1.isBigInt)(value)) {
        if (value > Number.MAX_SAFE_INTEGER || value < Number.MIN_SAFE_INTEGER) {
            return null;
        }
        return Number(value);
    }
    /**
     * radix has not been implemented because there is no built-in method we can rely on,
     * if it turns out we need it, feel free to implement one.
     */
    if (!(0, is_valid_number_syntax_js_1.isValidNumberSyntax)(value)) {
        return null;
    }
    const parsed = Number(value);
    if (!Number.isFinite(parsed)) {
        return null;
    }
    return parsed;
}
/**
 * Parses a string as a number in base 10.
 *
 * Unlike {@link parseSafeInteger}, this function does not support specifying the radix, it is always base 10.
 * This parser can produce numbers that are not safely representable with the JS number type
 * This method will never produce infinite numbers.
 *
 * This method supports the scientific notation (e.g., 5e1 produces 50)
 *
 * If you are parsing integers, prefer {@link parseSafeInteger} or {@link parseBigInt} instead.
 *
 * @param value The string to parse as a floating point number
 * @returns null if the input is not a base 10 number
 */
exports.parseFiniteNumber = (0, build_parser_js_1.buildNullBasedParser)(parseFiniteNumberInternal, value => `Value ${(0, inspect_js_1.inspect)(value)} is not a valid finite number.`);
