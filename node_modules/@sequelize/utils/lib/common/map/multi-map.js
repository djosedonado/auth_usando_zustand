"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiMap = void 0;
const uniq_js_1 = __importDefault(require("lodash/uniq.js"));
const consts_js_1 = require("../consts.js");
class MultiMap {
    #internalMap = new Map();
    constructor(entries) {
        if (entries) {
            for (const [key, values] of entries) {
                this.set(key, values);
            }
        }
    }
    get size() {
        return this.#internalMap.size;
    }
    clear() {
        this.#internalMap.clear();
    }
    append(key, value) {
        const valueSet = this.#internalMap.get(key);
        if (valueSet?.includes(value)) {
            return this;
        }
        const newValue = valueSet ? [...valueSet, value] : [value];
        Object.freeze(newValue);
        this.#internalMap.set(key, newValue);
        return this;
    }
    deleteValue(key, value) {
        const valueSet = this.#internalMap.get(key);
        if (valueSet == null) {
            return false;
        }
        const newValueSet = valueSet.filter(val => val !== value);
        if (newValueSet.length === valueSet.length) {
            return false;
        }
        if (newValueSet.length === 0) {
            this.#internalMap.delete(key);
            return true;
        }
        Object.freeze(newValueSet);
        this.#internalMap.set(key, newValueSet);
        return true;
    }
    delete(key) {
        return this.#internalMap.delete(key);
    }
    keys() {
        return this.#internalMap.keys();
    }
    count(key) {
        const values = this.#internalMap.get(key);
        return values?.length ?? 0;
    }
    [Symbol.iterator]() {
        return this.#internalMap[Symbol.iterator]();
    }
    entries() {
        return this.#internalMap.entries();
    }
    get(key) {
        return this.#internalMap.get(key) ?? consts_js_1.EMPTY_ARRAY;
    }
    has(key) {
        return this.#internalMap.has(key);
    }
    set(key, values) {
        if (values.length === 0) {
            this.#internalMap.delete(key);
            return this;
        }
        const uniqueValues = Object.freeze((0, uniq_js_1.default)(values));
        this.#internalMap.set(key, uniqueValues);
        return this;
    }
    values() {
        return this.#internalMap.values();
    }
}
exports.MultiMap = MultiMap;
