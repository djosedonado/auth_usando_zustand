"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MapView = void 0;
class MapView {
    #target;
    /**
     * @returns the number of elements in the Map.
     */
    get size() {
        return this.#target.size;
    }
    constructor(target) {
        this.#target = target;
    }
    /**
     * Returns a specified element from the Map object. If the value that is associated to the provided key is an object, then you will get a reference to that object and any change made to that object will effectively modify it inside the Map.
     *
     * @param key
     * @returns Returns the element associated with the specified key. If no element is associated with the specified key, undefined is returned.
     */
    get(key) {
        return this.#target.get(key);
    }
    getOrThrow(key) {
        if (!this.#target.has(key)) {
            throw new Error(`No value found for key: ${key}`);
        }
        return this.#target.get(key);
    }
    /**
     * @param key
     * @returns boolean indicating whether an element with the specified key exists or not.
     */
    has(key) {
        return this.#target.has(key);
    }
    [Symbol.iterator]() {
        return this.#target[Symbol.iterator]();
    }
    entries() {
        return this.#target.entries();
    }
    keys() {
        return this.#target.keys();
    }
    values() {
        return this.#target.values();
    }
    toMutableMap() {
        return new Map(this.#target);
    }
}
exports.MapView = MapView;
