"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildErrorMessage = exports.toBe = exports.buildAssertionFunction = void 0;
function buildAssertionFunction(isAssertedType, buildError) {
    const isType = (value) => {
        return isAssertedType(value);
    };
    const isNotType = (value) => {
        return !isAssertedType(value);
    };
    isType.assert = (value, message) => {
        if (!isType(value)) {
            throw new Error(message ?? buildError(value, true));
        }
    };
    const assertIsNotType = (value, message) => {
        if (isType(value)) {
            throw new Error(message ?? buildError(value, false));
        }
    };
    isNotType.assert = assertIsNotType;
    return [isType, isNotType];
}
exports.buildAssertionFunction = buildAssertionFunction;
function toBe(validValueOrType) {
    return function buildToBeErrorMessage(value, shouldEqual) {
        return buildErrorMessage(validValueOrType, value, shouldEqual);
    };
}
exports.toBe = toBe;
function buildErrorMessage(validValueOrType, value, shouldEqual) {
    return `expected value ${shouldEqual ? '' : 'not '}to be ${validValueOrType} but got ${JSON.stringify(value)} instead`;
}
exports.buildErrorMessage = buildErrorMessage;
