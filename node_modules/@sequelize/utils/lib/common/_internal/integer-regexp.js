"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getIsIntegerRegExp = exports.MIN_RADIX_INCLUSIVE = exports.MAX_RADIX_INCLUSIVE = void 0;
const numericSymbols = [
    '0',
    '1',
    '2',
    '3',
    '4',
    '5',
    '6',
    '7',
    '8',
    '9',
    'A',
    'B',
    'C',
    'D',
    'E',
    'F',
    'G',
    'H',
    'I',
    'J',
    'K',
    'L',
    'M',
    'N',
    'O',
    'P',
    'Q',
    'R',
    'S',
    'T',
    'U',
    'V',
    'W',
    'X',
    'Y',
    'Z',
];
exports.MAX_RADIX_INCLUSIVE = 36;
exports.MIN_RADIX_INCLUSIVE = 2;
const integerRegExps = Array.from({ length: numericSymbols.length });
function getIsIntegerRegExp(radix) {
    if (radix < exports.MIN_RADIX_INCLUSIVE || radix > exports.MAX_RADIX_INCLUSIVE) {
        throw new RangeError(`parseSafeInteger() radix argument must be between ${exports.MIN_RADIX_INCLUSIVE} and ${exports.MAX_RADIX_INCLUSIVE}`);
    }
    if (!integerRegExps[radix]) {
        /**
         * Get all characters that are valid digits in this base (radix)
         *
         * Example: if radix = 16, characterSet will include [0, 1, ..., e, f]
         */
        const characterSet = numericSymbols.slice(0, radix);
        /**
         * Construct a regex that matches whether the input is a valid integer in this radix
         *
         * Example, if radix = 2, the regex will be:
         * /^-?[01]+$/i
         *
         * "i" for case insensitivity
         */
        integerRegExps[radix] = new RegExp(`^-?[${characterSet.join('')}]+$`, 'i');
    }
    return integerRegExps[radix];
}
exports.getIsIntegerRegExp = getIsIntegerRegExp;
